import org.gradle.api.plugins.jetty.JettyRun

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'maven'

defaultTasks 'test', 'interactiveTest', 'jar', 'war', 'imageMagickWar', 'standalone', 'install'

allprojects {
group = 'org.mapfish.print'
    version = '2.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'project-report'

repositories {
   flatDir {
       dirs 'C:/Users/khrnjak/workspace/digmap/target'
   }
        mavenLocal()
        maven {url "http://download.osgeo.org/webdav/geotools"}
  mavenCentral()
}
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '1.10'
//}

configurations {
    compile.transitive = true
    proguard
    geotools {
        description = 'Geotools spatial libraries'
    }
    
}

project.ext.junitVersion = "4.11"
dependencies {
    def metricsVersion = "3.0.2"
    def springVersion = "3.1.0.RELEASE"
	compile files('C:/Users/khrnjak/workspace/digmap/target/digmap-0.0.1-SNAPSHOT.jar',
				'C:/Users/khrnjak/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.49/bcpkix-jdk15on-1.49.jar',
				'C:/Users/khrnjak/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.49/bcprov-jdk15on-1.49.jar'
	)
	
    compile (
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-web:$springVersion",
            'com.itextpdf:itextpdf:5.4.4',
            'xerces:xercesImpl:2.4.0',
            'org.json:json:20080701',
            'org.jyaml:jyaml:1.3',
            'xalan:xalan:2.7.0',
            'log4j:log4j:1.2.14',
            'com.vividsolutions:jts:1.13',
            "org.mapfish.geo:mapfish-geo-lib:1.2.0",
            'commons-httpclient:commons-httpclient:3.1',
            'org.apache.pdfbox:pdfbox:1.6.0',
            'javax.media:jai_core:1.1.3',
            'javax.media:jai_imageio:1.1',
            "com.codahale.metrics:metrics-core:$metricsVersion",
            "com.codahale.metrics:metrics-servlet:$metricsVersion",
            "com.codahale.metrics:metrics-httpclient:$metricsVersion",
            "com.codahale.metrics:metrics-servlets:$metricsVersion",
            "com.codahale.metrics:metrics-log4j:$metricsVersion",
            'javax.media:jai_codec:1.1.3',
            "com.google.guava:guava:15.0")
    def geotoolsVersion = "13.1"
    geotools (
            "org.geotools:gt-epsg-hsql:$geotoolsVersion",
            "org.geotools:gt-render:$geotoolsVersion",
            "org.geotools:gt-geojson:$geotoolsVersion",
            "org.geotools:gt-geotiff:$geotoolsVersion",
            "org.geotools:gt-wms:$geotoolsVersion",
            "org.geotools:gt-wfs-ng:$geotoolsVersion",
            "org.geotools.xsd:gt-xsd-gml3:$geotoolsVersion",
            "org.geotools:gt-svg:$geotoolsVersion",
            "org.geotools:gt-cql:$geotoolsVersion"
    )
    
    compile (configurations.geotools)            

  compile ('org.apache.xmlgraphics:batik-transcoder:1.7'){
    exclude module: 'fop'
  }
  providedCompile 'javax.servlet:servlet-api:2.5'

  proguard 'net.sf.proguard:proguard:4.4'
}

allprojects {
    dependencies {
        testCompile ("junit:junit:${project.junitVersion}", 'org.mockito:mockito-core:1.9.5')
    }

    sourceSets {
        test {
            output.resourcesDir = output.classesDir
        }
    }
}

def gitRevision() {
	try {
		def cmd = "git rev-parse HEAD"
		def proc = cmd.execute()
		return proc.getText()
	} catch (Exception e) {
		return "Error occurred while trying to execute git commandline tool: "+e
	}
}
manifest.mainAttributes(
	'Main-Class':'org.mapfish.print.ShellMapPrinter', 
	'Build-Time': new Date().getDateTimeString(),
	'git-revision': gitRevision())

sourceCompatibility = 1.6
targetCompatibility = 1.6

compileJava.options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']

jar {
  enabled = true
  baseName = "print-lib"
}

war {
  baseName = "print-servlet"
  manifest.mainAttributes(
	'Build-Time': new Date().getDateTimeString(),
	'git-revision': gitRevision())
}
task imageMagickWar (type: War) {
  baseName = "print-servlet"
  manifest.mainAttributes(
	'Build-Time': new Date().getDateTimeString(),
	'git-revision': gitRevision())
  classifier = "IMG-MAGICK"
  from fileTree('sample-spring/imagemagick')
}

task standalone (type: Jar) {
  baseName = "print-standalone"

  manifest = jar.manifest

  from sourceSets.main.output


  def dependencies = configurations.compile.resolve().findAll{ file ->
      return !file.name.contains("servlet-api")
  }

  
  def serviceDir = new File("$buildDir/META-INF/services")
  def metaInfDir = new File("$buildDir/META-INF/")

  for(file in dependencies) {
    
    def files = zipTree(file).matching { 
        exclude 'META-INF/**'
        exclude 'LICENSE'
    }
    
    from files
  }

  doFirst {
      
      serviceDir.deleteDir()
      serviceDir.mkdirs()
      for(file in dependencies.findAll({it.name.matches("((gt)|(spring-)).*")})) {
          zipTree(file).matching {
            include 'META-INF/services/*'
            include 'META-INF/spring.*'
          }.each {f ->
              def base = serviceDir
              if (f.name.startsWith("spring")) {
                  base = metaInfDir;
              }
              new File(base,f.name) << f.getText("UTF-8")
          }
      }
  }
  
  from fileTree(buildDir).matching{include 'META-INF/*'}
  
  into ""
  
}

task libJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName = 'print-lib'
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
 
task libSourcesJar(type: Jar) {
    baseName = 'print-lib'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task standaloneJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName = 'print-standalone'
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}
 
task standaloneSourcesJar(type: Jar) {
    baseName = 'print-standalone'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task show << {
//    sourceSets.main.classes.asFileTree.each {println it}
println gitRevision()
}
artifacts {
  archives jar, war, imageMagickWar, standalone, libSourcesJar, libJavadocJar, standaloneSourcesJar, standaloneJavadocJar
}

def artifactFilterMapping = ['lib':'print-lib', 'standalone':'print-standalone', 'war':'print-servlet']
configure(install.repositories.mavenInstaller) {
  artifactFilterMapping.each {entry ->
    addFilter(entry.key) { artifact, file ->
      artifact.name.contains entry.value
    }
  }
}


/*
 * This upload Archives configuration I took from:
 * http://jedicoder.blogspot.ch/2011/11/automated-gradle-project-deployment-to.html
 *
 * For deploying see section about "Create a gradle properties file"
 */
// need to sign jars for uploading releases to maven central
if (Boolean.parseBoolean(enablePublishing)) {
  apply plugin: 'signing'
  signing {
    sign configurations.archives
  }

  uploadArchives {
        dependsOn test, ':e2e-tests:interactiveTest'
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://$host/service/local/staging/deploy/maven2") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        snapshotRepository(url: "https://$host/content/repositories/snapshots")  {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
          uniqueVersion = false
        }
        artifactFilterMapping.each {entry ->
          addFilter(entry.key) { artifact, file ->
            artifact.name.contains entry.value
          }
        }
        pom('lib').project {
          name 'print-lib'
          packaging 'jar'
          description 'Library for generating PDFs and images from oneline webmapping services'
        }
        pom('war').project {
          name 'print'
          packaging 'war'
          description 'Web application for generating PDFs and images from oneline webmapping services'
        }
        pom('standalone').project {
          name 'print-standalone'
          packaging 'jar'
          description 'Application for generating PDFs and images from oneline webmapping services. All dependencies are included'
        }
        artifactFilterMapping.keySet().each { filterName ->
          pom(filterName).project {
            url 'http://www.mapfish.org/doc/print/'

            scm {
               url 'scm:git@github.com:mapfish/mapfish-print.git'
               connection 'scm:git@github.com:mapfish/mapfish-print.git'
               developerConnection 'scm:git@github.com:mapfish/mapfish-print.git'
            }

            licenses {
               license {
                   name 'GNU General Public License'
                   url 'http://www.gnu.org/licenses/#GPL'
                   distribution 'repo'
               }
            }

            developers {
               developer {
                   id 'jesseeichar'
                   name 'Jesse Eichar'
               }
               developer {
                   id 'geekdenz'
                   name 'Tim-Hinnerk Heuer'
               }
               developer {
                   id 'miblon'
                   name 'Milo van der Linden'
            }
            }
            mailingLists {
              mailingList {
                name ='Users'
                subscribe='users-subscribe@mapfish.org'
                unsubscribe='users-subscribe@mapfish.org'
                post='users@mapfish.org'
                archive='http://www.mapfish.org/pipermail/users/'
              }
              mailingList {
                name ='Dev'
                subscribe='dev-subscribe@mapfish.org'
                unsubscribe='dev-subscribe@mapfish.org'
                post='dev@mapfish.org'
                archive='http://www.mapfish.org/pipermail/dev/'
              }
            }
          }
        }
      }
    }
  }
} else {
	uploadArchives << {
		throw new IllegalStateException("Cannot upload archives because enablePublishing property is not true.  It is $enablePublishing")
	}
}

def prop(key) {
  return System.getProperty(key) == null ? null : "--${key}=${System.getProperty(key)}"
}

task run (dependsOn: compileJava) << {
  def warning = """[WARNING] config parameter is required. 
  
  Usage:
    gradle run -Dconfig={value} [-Dspec={value}] [-Dverbose={value}] [-Doutput={value}] [-DclientConfig] [-Dreferer={value}] [-Dlog4jConfig={value}]
  Params:
    -Dconfig={String}: Filename for the configuration (templates&CO)
    -Dspec={String}: The location of the description of what has to be printed. By default, STDIN (defaults to [null])
    -Dverbose={int}: Used only if log4jConfig is not specified. 3 if you want everything, 2 if you want the debug information (stacktraces are shown), 1 for infos and 0 for only warnings and errors (defaults to [1])
    -Doutput={String}: The destination file. By default, STDOUT (defaults to [null])
    -DclientConfig={on|off}: Get the config for the client form. Doesn't generate a PDF (defaults to [off])
    -Dreferer={String}: Referer address to use when doing queries (defaults to [null])
    -Dlog4jConfig={String}: Property file for the log4j configuration (defaults to [null])
    
  Example:
    gradle run -Dconfig=samples/config.yaml -Dspec=samples/spec.json -Doutput=/tmp/print-out.pdf
    
    
  """

  def args = [prop("config"),prop("spec"),prop("output"),prop("verbose"),prop("clientConfig"),prop("referer"),prop("log4jConfig")]
  if(prop("config") == null) {
    println(warning)
  } else {  
    ant.java(classname: 'org.mapfish.print.ShellMapPrinter', fork: false, logError: false,
             classpath: "${sourceSets.main.runtimeClasspath.asPath}")  {
        for(a in args.findAll {it!=null}){
          arg(value: a)
        }
     }
   }
}
run.description = 'Run mapfish print from commandline.  All commandline parameters apply. Execute task without system parameters to get help' 

jettyRun {
    httpPort = 8080
    scanTargets = (fileTree("src/main/").include("webapp/WEB-INF/**") + fileTree(compileJava.destinationDir)).files
    reload = 'manual'
}

task jettyRunImgMgk (type: JettyRun) {
	description = 'Run mapfish-print within jetty with the imagemagick format installed'
    httpPort = 8080
    def imgMagickSpring = file("sample-spring/imagemagick/WEB-INF/classes/imagemagick-spring-application-context-override.xml") 
    scanTargets = (fileTree("src/main/").include("webapp/WEB-INF/**") + fileTree(compileJava.destinationDir)).files
    reload = 'manual'

    def tmpFile = file("src/main/webapp/WEB-INF/classes/imagemagick-spring-application-context-override.xml")
    tmpFile.deleteOnExit()
    doFirst {
        //tmpFile.createNewFile()
        tmpFile << imgMagickSpring.bytes
    }
    doLast {
        tmpFile.delete()
    }
}



/*
This task is not ready for prime time.  I do not know what parameters the class expects

task runWarTest(dependsOn: jettyRunWar) << {
  description = "run load test on embedded jetty"
  try {
    
    testServer = System.properties('testServer') :? 
    def constructor
    ant.java(
      classname: 'integration.HeavyLoad', fork:false,
      classpath: "${configurations.testCompile.asPath}") 
      {
        arg(value: "http://localhost:$httpPort/print")
        arg(value: "samples/spec.json")
      }
  } finally {
    jettyStop.execute()
  }
}*/




def proguardConfig = file("$buildDir/proguardconfig.pro")
def proguardOutput = file("$buildDir/standalone.min.jar")
task generateProguardConfigFile << {
    logger.info('Creating proguard configuration file for obfsucate task')
    proguardConfig.withWriter{
        writer ->

          writer << "-injars ${standalone.archivePath}\n"
          writer << "-outjars ${proguardOutput}\n"
          writer << '-printseeds\n'
          writer << '-dontskipnonpubliclibraryclasses\n'
          writer << '-dontskipnonpubliclibraryclassmembers\n'
          writer << '-keepclasseswithmembers public class * {\n'
          writer << '    public static void main(java.lang.String[]);\n'
          writer << '}\n'
//          writer << '-optimizations !code/simplification/cast' + '\n'
          writer << '-allowaccessmodification\n'
    }
}

task minify(dependsOn: [generateProguardConfigFile]) << {
  inputs.file standalone.archivePath
  outputs.file proguardOutput
  ant.taskdef(resource: 'proguard/ant/task.properties',
              classpath:  configurations.proguard.asPath    )
  ant.proguard(configuration: proguardConfig)
}
minify.description = 'Minify standalone jar, not yet functioning'

/*
task debug(type: JettyRun) {
    //httpPort = 8080
    scanTargets = (fileTree("src/main/").include("webapp/WEB-INF/**") + fileTree(compileJava.destinationDir)).files
    reload = 'manual'
    jettyConfig = file('jetty-debug.xml')
    //jettyEnvXml = file('jetty-debug.xml')
}
*/
